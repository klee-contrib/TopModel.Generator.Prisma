namespace TopModel.Generator.Prisma;

using Microsoft.Extensions.Logging;
using TopModel.Core;
using TopModel.Generator.Core;
using TopModel.Utils;

/// <summary>
/// Générateur de définitions Typescript.
/// </summary>
public class PrismaModelGenerator : ClassGroupGeneratorBase<PrismaConfig>
{
    private readonly ILogger<PrismaModelGenerator> _logger;

    public PrismaModelGenerator(ILogger<PrismaModelGenerator> logger)
        : base(logger)
    {
        this._logger = logger;
    }

    public override string Name => "PrismaModelGen";

    protected override IEnumerable<(string FileType, string FileName)> GetFileNames(Class classe, string tag)
    {
        List<(string FileType, string FileName)> fileNames = new()
        {
            (string.Empty,
                Path.Combine(
                   this.Config.OutputDirectory,
                   this.Config.ResolveVariables(this.Config.EntityFilePath!, tag),
                   $"{classe.Namespace.Module.ToLower()}.prisma"
            .Replace("\\", "/"))),
        };
        return fileNames;
    }

    protected override void HandleFile(string fileType, string fileName, string tag, IEnumerable<Class> classes)
    {
        using var fw = new FileWriter(fileName, this._logger, false);
        foreach (var classe in classes.Where(c => c.IsPersistent))
        {
            this.HandleClass(classe, tag, fw);
        }
    }

    private void HandleClass(Class classe, string tag, FileWriter fw)
    {
        fw.WriteLine($@"model {classe.Name} {{");
        var propertyNameIndent = classe.GetProperties(this.Classes).Select(p => p.NameCamel.Length)
                                .Concat(classe.GetProperties(this.Classes).OfType<AssociationProperty>().Select(a => a.Association.PrimaryKey.First().NameCamel.Length))
                                .Max();
        var propertyTypeIndent = classe.GetProperties(this.Classes).Select(p => this.Config.GetType(p, this.Classes, false).Length)
                                .Concat(classe.GetProperties(this.Classes).OfType<AssociationProperty>().Select(a => a.Association.NamePascal.Length + (a.Type.IsToMany() ? 2 : 0)))
                                .Max();
        foreach (var property in classe.GetProperties(this.Classes))
        {
            var line = $@"  {property.NameCamel.PadRight(propertyNameIndent, ' ')}";
            line += $@" {this.Config.GetType(property, this.Classes, false).PadRight(propertyTypeIndent, ' ')}";
            line += $@" @map(""{property.SqlName}"")";
            if (property.PrimaryKey)
            {
                line += " @id";
                if (property.Domain.AutoGeneratedValue)
                {
                    line += " @default(autoincrement())";
                }
            }

            if (property is AssociationProperty ap && ap.Type != AssociationType.ManyToMany && property is not ReverseAssociationProperty)
            {
                var assoLine = $@"  {ap.Association.Name.Value.ToCamelCase().PadRight(propertyNameIndent, ' ')}";
                assoLine += $" {(ap.Association.NamePascal + (ap.Type.IsToMany() ? "[]" : string.Empty)).PadRight(propertyNameIndent, ' ')}";
                assoLine += $" @relation(fields: [{property.NameCamel}], references: [{ap.Association.PrimaryKey.FirstOrDefault()!.NameCamel}])";
                fw.WriteLine(assoLine);
            }
            else if (property is ReverseAssociationProperty rp && rp.Type != AssociationType.ManyToMany)
            {
                var assoLine = $@"  {rp.Association.Name.Value.PadRight(propertyNameIndent, ' ')} {rp.Association.NamePascal}{(rp.ReverseProperty.Type.IsToMany() ? string.Empty : "[]")}";
                fw.WriteLine(assoLine);
            }

            fw.WriteLine(line);
        }

        fw.WriteLine("}");

        if (this.Config.CanClassUseEnums(classe, Classes))
        {
            fw.WriteLine();
            fw.WriteLine($@"enum {this.Config.GetEnumType(classe.PrimaryKey.FirstOrDefault())} {{");

            var refs = this.GetAllValues(classe)
                .OrderBy(x => x.Name, StringComparer.Ordinal)
                .ToList();

            foreach (var value in refs)
            {
                fw.WriteLine(1, $"{value.Value[classe.PrimaryKey.FirstOrDefault()]}");
            }

            fw.WriteLine("}");
        }
    }
}